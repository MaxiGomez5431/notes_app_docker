/**
 * Generated by orval v7.10.0 🍺
 * Do not edit manually.
 * Notes API
 * API for managing notes
 * OpenAPI spec version: 1.0
 */
import axios from './axios';
import type {
  AxiosRequestConfig,
  AxiosResponse
} from 'axios';

export interface NoteDto {
  /** Note title */
  title: string;
  /** Note content */
  body: string;
  /** Note tags */
  tags: string[];
  /** Whether the note is archived */
  is_archived: boolean;
}

export interface NoteResponseDto {
  /** Note list */
  data: NoteDto[];
}

export interface CreateNoteDto {
  /** Title of the note */
  title: string;
  /** Body content of the note */
  body: string;
  /** Tags associated with the note */
  tags?: string[];
  /** Whether the note is archived */
  is_archived?: boolean;
}

export interface UpdateNoteDto {
  /** Updated note title */
  title?: string;
  /** Updated body content */
  body?: string;
  /** Updated tags */
  tags?: string[];
  /** Whether the note is archived */
  is_archived?: boolean;
}

export const getNotesAPI = () => {
/**
 * @summary List all active notes
 */
const noteControllerFindAll = <TData = AxiosResponse<NoteResponseDto>>(
     options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/note`,options
    );
  }

/**
 * @summary Create a new note
 */
const noteControllerCreate = <TData = AxiosResponse<NoteDto>>(
    createNoteDto: CreateNoteDto, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.post(
      `/note`,
      createNoteDto,options
    );
  }

/**
 * @summary List archived notes
 */
const noteControllerFindArchived = <TData = AxiosResponse<NoteResponseDto>>(
     options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/note/archived`,options
    );
  }

/**
 * @summary Get a note by ID
 */
const noteControllerFindOne = <TData = AxiosResponse<NoteDto>>(
    id: number, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/note/${id}`,options
    );
  }

/**
 * @summary Update an existing note
 */
const noteControllerUpdate = <TData = AxiosResponse<NoteDto>>(
    id: number,
    updateNoteDto: UpdateNoteDto, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.put(
      `/note/${id}`,
      updateNoteDto,options
    );
  }

/**
 * @summary Delete a note
 */
const noteControllerRemove = <TData = AxiosResponse<void>>(
    id: number, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.delete(
      `/note/${id}`,options
    );
  }

return {noteControllerFindAll,noteControllerCreate,noteControllerFindArchived,noteControllerFindOne,noteControllerUpdate,noteControllerRemove}};
export type NoteControllerFindAllResult = AxiosResponse<NoteResponseDto>
export type NoteControllerCreateResult = AxiosResponse<NoteDto>
export type NoteControllerFindArchivedResult = AxiosResponse<NoteResponseDto>
export type NoteControllerFindOneResult = AxiosResponse<NoteDto>
export type NoteControllerUpdateResult = AxiosResponse<NoteDto>
export type NoteControllerRemoveResult = AxiosResponse<void>
